// <auto-generated />
using System;
using EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityFramework.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210516225515_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.ArticleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Entities.ParserConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateTimeFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("XPathArticles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XPathBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XPathDateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XPathLinkArticle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XPathTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParsersConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 5, 17, 4, 55, 14, 776, DateTimeKind.Local).AddTicks(2904),
                            DateTimeFormat = "dd M yyyy, HH:mm",
                            SiteLink = "https://tengrinews.kz",
                            XPathArticles = "//div[@class='tn-main-news-item']",
                            XPathBody = "//div[@class='tn-news-content']",
                            XPathDateTime = "//h1[@class='tn-content-title']//span[@class='tn-hidden']",
                            XPathLinkArticle = "//a[@class='tn-link']",
                            XPathTitle = "//h1[@class='tn-content-title']"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 5, 17, 4, 55, 14, 776, DateTimeKind.Local).AddTicks(3336),
                            DateTimeFormat = "HH:mm, dd.MM.yyyy",
                            SiteLink = "https://24.kz/ru/",
                            XPathArticles = "//div[@class='nspArt']",
                            XPathBody = "//div[@class='itemBody']",
                            XPathDateTime = "//ul//li[@class='itemDate']//time",
                            XPathLinkArticle = "//a[@class='nspImageWrapper tleft fnull']",
                            XPathTitle = "//article[@class='view-article itemView']//div[@class='itemheader']//header//h1"
                        });
                });

            modelBuilder.Entity("Entities.TokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 5, 17, 4, 55, 14, 774, DateTimeKind.Local).AddTicks(8344),
                            FirstName = "Jon",
                            LastName = "Snow",
                            Login = "jon",
                            PasswordHash = "AQAAAAEAACcQAAAAEKOPbIyZyjFf6xY8FWjzMTOxW66msNg49k/41Z+z6TweZ6Ekl1Bn69HuEjKv1UWYgw=="
                        });
                });

            modelBuilder.Entity("Entities.TokenEntity", b =>
                {
                    b.HasOne("Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
